# -*- coding: utf-8 -*-
# @Time : 2019/11/26 21:29
# @Author : lzm
# @Function : 函数的参数


"""
函数的参数分为以下几种类型：
1.位置参数
2.关键词参数
3.位置参数数据
4.字典
"""


# 位置参数
def func1(x, y, z):
    print(x)
    print(y)
    print(z)


func1(1, 2, 3)

"""
位置参数：按照参数的位置对应赋值，传递的参数个数不能多，也不能少，否则都会报错
"""


print("-----------------分割线-----------------------")


#  关键字参数
def func2(x, y, z):
    print(x)
    print(y)
    print(z)


func2(x=1, y=2, z=3)
func2(y=2, z=3, x=1)
"""
关键词参数是按照指定的形参的名称来赋值的，顺序不会影响给对应的形参赋值
"""


print("------------------分割线---------------------------")


# 默认参数
def func(x, z=2):
    print(x)
    print(z)


func(1)
func(1,3)


print("------------------分割线----------------------")


# 位置参数和关键词参数配合使用
def func3(x, y, z):
    print(x)
    print(y)
    print(z)


func3(1, 2, z=3)
func3(1, z=3, y=2)
"""
位置参数和关键词参数是可以混用的，但是有个前提就是位置参数必须在所有的关键词参数的左边，否则会出现参数对应不上的异常
如：func3(x=1, 2, 3)这种方式的写法是直接报错的
"""

print("------------分割线--------------------")


# 位置参数数组（位置参数的变长数组）
def func4(x, *args):
    print(x)
    print(args)


func4(1, 2, 3, 4, 5)
# func4(x=1, 2, 3, 4, 5) 错误写法
"""
打印结果是2行，一行是1，一行是(2, 3, 4, 5)
对于函数func4来说，第一个参数x是位置参数，*args是通用写法，表示此处可以添加多个位置参数，打印时这些位置参数的值被放到一个元组中
"""


print("--------------分割线---------------------")


# 字典
def func5(x, *args, **kwargs):
    print(x)
    print(args)
    print(kwargs)


func5(1, name="lzm", age=28, address="北京")  # 1  ()  {'name': 'lzm', 'age': 28, 'address': '北京'}
func5(1, 2, 3, name="lzm", age=28, address="北京")

"""
**kwargs表示会将关键词参数封装为一个字典
"""

print("-------------分隔线-------------------")



